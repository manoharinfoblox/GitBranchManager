package com.gitmanager.service;

import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.MergeResult;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.api.errors.RefAlreadyExistsException;
import org.eclipse.jgit.diff.DiffEntry;
import org.eclipse.jgit.diff.DiffFormatter;
import org.eclipse.jgit.lib.ObjectId;
import org.eclipse.jgit.lib.ObjectReader;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.lib.ProgressMonitor;
import org.eclipse.jgit.storage.file.FileRepositoryBuilder;
import org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider;
import org.eclipse.jgit.treewalk.CanonicalTreeParser;
import org.springframework.stereotype.Service;
import org.springframework.web.servlet.mvc.method.annotation.SseEmitter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Set;
import java.util.Map;
import java.util.HashMap;

@Service
public class GitService {
    private static final Logger logger = LoggerFactory.getLogger(GitService.class);
    private SseEmitter progressEmitter;

    public void setProgressEmitter(SseEmitter emitter) {
        this.progressEmitter = emitter;
    }

    public MergeResult mergeBranches(String sourceBranch, String targetBranch, String repositoryUrl, String token) throws GitAPIException, IOException {
        try (Repository repository = openRepository(repositoryUrl, token); Git git = new Git(repository)) {
            git.fetch()
                .setCredentialsProvider(new UsernamePasswordCredentialsProvider("token", token))
                .setProgressMonitor(new GitProgressMonitor(progressEmitter))
                .call();
            
            // Checkout target branch
            try {
                git.checkout()
                   .setName(targetBranch)
                   .setCreateBranch(true)
                   .setStartPoint("origin/" + targetBranch)
                   .call();
            } catch (RefAlreadyExistsException e) {
                // If branch exists, just check it out
                git.checkout()
                   .setName(targetBranch)
                   .call();
            }
            
            git.pull()
                .setCredentialsProvider(new UsernamePasswordCredentialsProvider("token", token))
                .setProgressMonitor(new GitProgressMonitor(progressEmitter))
                .call();
            
            return git.merge()
                .include(repository.resolve("origin/" + sourceBranch))
                .setCommit(true)
                .setMessage("Merge " + sourceBranch + " into " + targetBranch)
                .call();
        }
    }

    public String getDiff(String sourceBranch, String targetBranch, String repositoryUrl, String token) throws GitAPIException, IOException {
        logger.info("Getting diff between {} and {} for repo {}", sourceBranch, targetBranch, repositoryUrl);
        try (Repository repository = openRepository(repositoryUrl, token); Git git = new Git(repository)) {
            logger.debug("Repository opened at: {}", repository.getDirectory());
            
            // Fetch latest changes
            git.fetch()
                .setCredentialsProvider(new UsernamePasswordCredentialsProvider("token", token))
                .setProgressMonitor(new GitProgressMonitor(progressEmitter))
                .call();
            
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            try (DiffFormatter formatter = new DiffFormatter(out)) {
                formatter.setRepository(repository);

                // Try to get the branch refs directly first
                ObjectId oldHead = repository.resolve("origin/" + sourceBranch + "^{tree}");
                ObjectId newHead = repository.resolve("origin/" + targetBranch + "^{tree}");

                if (oldHead == null || newHead == null) {
                    // If direct resolution fails, try checking out the branches
                    checkoutBranch(git, sourceBranch);
                    checkoutBranch(git, targetBranch);
                        git.checkout()
                           .setName(sourceBranch)
                           .call();
                    }

                    // Target branch checkout
                    try {
                        git.checkout()
                           .setName(targetBranch)
                           .setCreateBranch(true)
                           .setStartPoint("origin/" + targetBranch)
                           .call();
                    } catch (RefAlreadyExistsException e) {
                        git.checkout()
                           .setName(targetBranch)
                           .call();
                    }

                    // Get tree iterators after checkout
                    oldHead = repository.resolve(sourceBranch + "^{tree}");
                    newHead = repository.resolve(targetBranch + "^{tree}");
                }

                // Get tree iterators
                ObjectReader reader = repository.newObjectReader();
                CanonicalTreeParser oldTreeParser = new CanonicalTreeParser();
                CanonicalTreeParser newTreeParser = new CanonicalTreeParser();
                
                oldTreeParser.reset(reader, oldHead);
                newTreeParser.reset(reader, newHead);

                // Get the diff
                List<DiffEntry> diffs = git.diff()
                        .setOldTree(oldTreeParser)
                        .setNewTree(newTreeParser)
                        .call();

                logger.info("Found {} differences", diffs.size());
                for (DiffEntry diff : diffs) {
                    logger.debug("Processing diff: {} - {}", diff.getChangeType(), diff.getNewPath());
                    formatter.format(diff);
                }
            }
            
            String result = out.toString();
            logger.debug("Diff completed, result length: {}", result.length());
            return result;
        } catch (Exception e) {
            logger.error("Error getting diff: {}", e.getMessage(), e);
            throw new IOException("Failed to get diff: " + e.getMessage(), e);
        }
    }

    public Set<String> getConflicts(String repositoryUrl, String token) throws IOException {
        try (Repository repository = openRepository(repositoryUrl, token); Git git = new Git(repository)) {
            git.fetch()
                .setCredentialsProvider(new UsernamePasswordCredentialsProvider("token", token))
                .setProgressMonitor(new GitProgressMonitor(progressEmitter))
                .call();
            
            return git.status().call().getConflicting();
        } catch (GitAPIException e) {
            throw new RuntimeException("Failed to get conflicts: " + e.getMessage(), e);
        }
    }

    private Repository openRepository(String repositoryUrl, String token) throws IOException {
        if (repositoryUrl == null || token == null) {
            throw new IllegalArgumentException("Repository URL and token must not be null");
        }

        String repoName = repositoryUrl.substring(repositoryUrl.lastIndexOf('/') + 1);
        if (repoName.endsWith(".git")) {
            repoName = repoName.substring(0, repoName.length() - 4);
        }
        File gitDir = new File(System.getProperty("java.io.tmpdir"), "git-manager/" + repoName + "/.git");
        
        if (!gitDir.exists()) {
            try {
                gitDir.getParentFile().mkdirs();
                Git.cloneRepository()
                    .setURI(repositoryUrl)
                    .setDirectory(gitDir.getParentFile())
                    .setCredentialsProvider(new UsernamePasswordCredentialsProvider("token", token))
                    .setProgressMonitor(new GitProgressMonitor(progressEmitter))
                    .call();
            } catch (GitAPIException e) {
                throw new IOException("Failed to clone repository: " + e.getMessage(), e);
            }
        }

        try {
            return new FileRepositoryBuilder()
                    .setGitDir(gitDir)
                    .readEnvironment()
                    .build();
        } catch (IOException e) {
            throw new IOException("Failed to open repository: " + e.getMessage(), e);
        }
    }

    private static class GitProgressMonitor implements ProgressMonitor {
        private final SseEmitter emitter;
        private int totalWork;
        private int completedWork;
        private String taskTitle;

        public GitProgressMonitor(SseEmitter emitter) {
            this.emitter = emitter;
        }

        @Override
        public void start(int totalTasks) {
            // Called when the operation starts
        }

        @Override
        public void beginTask(String title, int totalWork) {
            this.totalWork = totalWork;
            this.completedWork = 0;
            this.taskTitle = title;
            sendProgress(0);
        }

        @Override
        public void update(int completed) {
            this.completedWork += completed;
            int percentage = totalWork > 0 ? (int) ((completedWork * 100.0) / totalWork) : 0;
            sendProgress(percentage);
        }

        @Override
        public void endTask() {
            sendProgress(100);
        }

        @Override
        public boolean isCancelled() {
            return false;
        }

        @Override
        public void showDuration(boolean enabled) {
            // This method is not used in our implementation
        }

        private void sendProgress(int percentage) {
            if (emitter != null) {
                try {
                    Map<String, Object> progressData = new HashMap<>();
                    progressData.put("type", "progress");
                    progressData.put("task", taskTitle);
                    progressData.put("percentage", percentage);
                    emitter.send(SseEmitter.event()
                        .data(progressData)
                        .name("progress"));
                } catch (IOException e) {
                    logger.error("Error sending progress update: {}", e.getMessage());
                }
            }
        }
    }

    private synchronized void safeEmit(Object data) {
        if (progressEmitter != null) {
            try {
                Map<String, Object> progressData = new HashMap<>();
                progressData.put("type", "progress");
                if (data instanceof Map) {
                    progressData.putAll((Map<String, Object>) data);
                } else {
                    progressData.put("message", data.toString());
                }
                progressEmitter.send(SseEmitter.event().data(progressData).name("progress"));
            } catch (Exception e) {
                logger.warn("Failed to send SSE event: {}", e.getMessage());
                if (progressEmitter != null) {
                    try {
                        progressEmitter.complete();
                    } catch (Exception ex) {
                        // Ignore
                    }
                    progressEmitter = null;
                }
            }
        }
    }

    private void checkoutBranch(Git git, String branchName) throws GitAPIException {
        try {
            safeEmit(Map.of("task", "Checking out " + branchName, "percentage", 0));
            
            // First try to checkout existing branch
            git.checkout()
                .setName(branchName)
                .call();
                
            safeEmit(Map.of("task", "Checked out " + branchName, "percentage", 100));
        } catch (RefAlreadyExistsException e) {
            // Branch exists but couldn't be checked out, try to force it
            git.checkout()
                .setName(branchName)
                .setForced(true)
                .call();
        } catch (Exception e) {
            // Branch doesn't exist, create it
            git.checkout()
                .setName(branchName)
                .setCreateBranch(true)
                .setStartPoint("origin/" + branchName)
                .call();
        }
    }
}
